name: genji-infra

x-base-settings: &base-settings
  restart: unless-stopped

x-genji-networks: &genji-networks
  networks:
    - genji-network
    - caddy-network

# x-environment-glitch-tip: &default-environment-glitchtip
#   environment:
#     - DATABASE_URL=${DATABASE_URL}/glitchtip
#     - SECRET_KEY # best to run openssl rand -hex 32
#     - PORT # If changing, change the web service port too
#     - SENDGRID_API_KEY
#     - EMAIL_BACKEND
#     - GLITCHTIP_DOMAIN # Change this to your domain
#     - DEFAULT_FROM_EMAIL # Change this to your email
#     - CELERY_WORKER_AUTOSCALE="1,3" # Scale between 1 and 3 to prevent excessive memory usage. Change it or remove to set it to the number of cpu cores.
#     - ENABLE_USER_REGISTRATION=false

# x-depends_on: &default-depends_on
#   - glitchtip-postgres
#   - glitchtip-redis

services:
  genji-lust:
    container_name: genji-lust
    image: chillfish8/lust:2.1.0
    command: --config-file "/var/lust/config.yaml"
    <<: [*base-settings, *genji-networks]
    environment:
      - AWS_SECRET_ACCESS_KEY
      - AWS_ACCESS_KEY_ID
    volumes:
      - "./lust/config.yaml:/var/lust/config.yaml"

  genji-rabbit:
    container_name: genji-rabbit
    image: rabbitmq:4.0-management
    environment:
      - RABBITMQ_DEFAULT_USER
      - RABBITMQ_DEFAULT_PASS
    <<: [*base-settings, *genji-networks]
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3

  libretranslate:
    container_name: libretranslate
    build:
      context: ./libretranslate
      dockerfile: Dockerfile
    <<: [*base-settings, *genji-networks]
    mem_limit: 4g
    security_opt:
      - no-new-privileges:true
    environment:
      - LT_DEBUG=true
      - LT_UPDATE_MODELS=true
      - LT_SSL=true
      - LT_SUGGESTIONS=false
      - LT_METRICS=false
      - LT_DISABLE_WEB_UI=true
      - LT_API_KEYS=true
      - LT_THREADS=12
      - LT_FRONTEND_TIMEOUT=2000
      - LT_REQ_LIMIT=0
      # - LT_CHAR_LIMIT=1200
      - LT_API_KEYS_DB_PATH=/app/db/api_keys.db
    healthcheck:
      test: ["CMD-SHELL", "./venv/bin/python scripts/healthcheck.py"]
    volumes:
      - /home/nebula/bkan0n/appdata/libretranslate/keys:/app/db:rw
      - /home/nebula/bkan0n/appdata/libretranslate/local:/home/libretranslate/.local:rw

  genji-postgres:
    container_name: genji-postgres
    build:
      context: ./database
      dockerfile: Dockerfile
    ports:
      - 25432:5432
    volumes:
      - "/home/nebula/bkan0n/appdata/genji-postgres:/var/lib/postgresql/data"
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
    <<: [*base-settings, *genji-networks]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  genji-pg-backup-utility:
    image: eeshugerman/postgres-backup-s3:16
    container_name: genji-pg-backup-utility
    environment:
      - SCHEDULE=@daily # optional
      - BACKUP_KEEP_DAYS=7 # optional
      - S3_REGION
      - S3_ACCESS_KEY_ID
      - S3_SECRET_ACCESS_KEY
      - S3_BUCKET
      - S3_PREFIX
      - S3_ENDPOINT
      - POSTGRES_HOST
      - POSTGRES_DATABASE
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_PORT
    depends_on:
      genji-postgres:
        condition: service_healthy
    <<: [*base-settings, *genji-networks]

  # glitchtip-postgres:
  #   container_name: glitchtip-postgres
  #   image: postgres:17
  #   environment:
  #     POSTGRES_HOST_AUTH_METHOD: "trust" # Consider removing this and setting a password
  #   volumes:
  #     - pg-data:/var/lib/postgresql/data
  #   <<: [*base-settings, *genji-networks]

  # glitchtip-redis:
  #   container_name: glitchtip-redis
  #   image: valkey/valkey
  #   <<: [*base-settings, *genji-networks]

  # glitchtip-web:
  #   container_name: glitchtip-web
  #   image: glitchtip/glitchtip
  #   depends_on: *default-depends_on
  #   volumes:
  #     - uploads:/code/uploads
  #   <<: [*base-settings, *default-environment-glitchtip, *genji-networks]

  # glitchtip-worker:
  #   container_name: glitchtip-worker
  #   image: glitchtip/glitchtip
  #   command: ./bin/run-celery-with-beat.sh
  #   depends_on: *default-depends_on
  #   volumes:
  #     - uploads:/code/uploads
  #   <<: [*base-settings, *default-environment-glitchtip, *genji-networks]

  # glitchtip-migrate:
  #   container_name: glitchtip-migrate
  #   image: glitchtip/glitchtip
  #   depends_on: *default-depends_on
  #   command: ./bin/run-migrate.sh
  #   <<: [*default-environment-glitchtip, *genji-networks]

  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    container_name: umami
    environment:
      - DATABASE_URL=${DATABASE_URL}/analytics # TODO see if glitch tip can go in this database as well. concat /dbname to the end of secrets?
      - DATABASE_TYPE=postgresql
      - APP_SECRET
    init: true
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5
    <<: [*base-settings, *genji-networks]

# volumes:
#   pg-data:
#   uploads:

networks:
  caddy-network:
    external: true
  genji-network:
    external: true
